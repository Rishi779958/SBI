"""
Django settings for A2SL project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # This is where all the project files are stored."

import nltk
NLTK_DATA_DIR = os.path.join(BASE_DIR, 'nltk_data') # where to store and find its nltk data files 
nltk.data.path.append(NLTK_DATA_DIR)
# download nltk utilities
nltk.download('averaged_perceptron_tagger')  # identifying nouns, verbs, adjectives, etc.
nltk.download('wordnet')  # synonyms, antonyms, and meanings.
nltk.download('omw-1.4')  # Provides translations and support for multilingual word processing.



# SECURITY WARNING: django-admin startproject <project_name>
# Protecting passwords
SECRET_KEY = '3k7=!d39#4@_&5a6to&4=_=j(c^v0(vv91cj5+9e8+d4&+01jb'


DEBUG = True  # shows detailed error messages 

ALLOWED_HOSTS = []  # list of domains/hostnames that our project can serve.
 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

#  This list contains Django apps and third-party apps that our project uses.

# 'django.contrib.admin': Provides a built-in admin interface for managing your application.
# 'django.contrib.auth': Handles user authentication (login/logout).
# 'django.contrib.contenttypes': Supports different content types in models.
# 'django.contrib.sessions': Manages user sessions across requests.
# 'django.contrib.messages': Handles system messages (e.g., success/error notifications).
# 'django.contrib.staticfiles': Manages static files like CSS and images.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Enhances security by managing headers like HTTPS redirects.
    'django.contrib.sessions.middleware.SessionMiddleware',  #  Manages user sessions.
    'django.middleware.common.CommonMiddleware', # Handles general request and response operations.
    'django.middleware.csrf.CsrfViewMiddleware', # Protects against CSRF attacks   // 
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Manages user authentication.
    'django.contrib.messages.middleware.MessageMiddleware', # Handles temporary messages for users.
    'django.middleware.clickjacking.XFrameOptionsMiddleware', #  Protects against clickjacking attacks.  // click on different link 
]

# Middleware in Django is a series of components that process requests and responses

ROOT_URLCONF = 'A2SL.urls' # Without this line, Django wouldn't know how to display the correct page when someone visits our website.
                           # tells Django where to find the URL configuration for your project.

TEMPLATES = [    #  HTML pages that users see in their web browser   ,   Configures how Django handles HTML templates.
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Specifies the template engine
        'DIRS': ['templates',],    # directory looking for template files.  it looks in a folder named templates.
        'APP_DIRS': True,   # allows Django to also look for templates within the folders of any additional apps created for our project
        'OPTIONS': {
            'context_processors': [  # provide extra information 
                'django.template.context_processors.debug',  # Helps with debugging during development
                'django.template.context_processors.request',  # Provides information about the current user's request.
                'django.contrib.auth.context_processors.auth',  # Provides information about the currently logged-in user (if any).
                'django.contrib.messages.context_processors.messages',  # Allows you to display messages (like success or error messages) to the user.
            ],
        },
    },
]

WSGI_APPLICATION = 'A2SL.wsgi.application'
# When someone visits your website, the web server sends the request to this application function,
#  and this function then directs the request to the appropriate parts of our Django code to generate a response.


DATABASES = {     # configure database for our project 
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',   # type of db 
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# to make sure users create strong passwords that are difficult to guess.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # his validator checks if the chosen password is similar to the user's username, first name,
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',   # 8 character 
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',   # 
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # password isn’t entirely numeric
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True    # support for multiple languages

USE_L10N = True    # formatting dates, numbers, etc., based on the user’s locale

USE_TZ = True     # dates and times are stored and displayed in the user’s local time zone.




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')    # folder where Django collects all static files when running

STATICFILES_DIRS = [    
    os.path.join(BASE_DIR,"assets"),   # Additional directories where Django looks for static files. Here, it looks in a folder named assets.
]